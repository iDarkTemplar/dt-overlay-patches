From 25575dafc428e07ed5b126af03360a4920752e96 Mon Sep 17 00:00:00 2001
From: Joan Bruguera <joanbrugueram@gmail.com>
Date: Mon, 20 Apr 2020 01:29:36 +0200
Subject: [PATCH 1/2] Fix crash at exit by allocating QObjects on the heap

In multiple commits between 1.6.6 and 1.6.7, some objects that derive
from QObject were added which do not have their own heap allocation,
but rather are global variables or live inside another object.
However, because ultimately Qt owns those objects and is responsible
for releasing them, they must have their own allocation.
Otherwise, Qt will attempt to call free on an invalid pointer, which
will most likely cause a crash on exit.

This commit does not introduce a leak since the objects are released
by Qt (using the QObject ownership mechanism). Note the call to
`std::atexit()` can be safely removed, since the settings are also
saved at `VodManager`'s destructor, which happens at application exit.

Fixes: #302
---
 src/model/imageprovider.cpp   | 5 +++--
 src/model/imageprovider.h     | 2 +-
 src/model/settingsmanager.cpp | 4 ++--
 src/model/vodmanager.cpp      | 8 ++------
 4 files changed, 8 insertions(+), 11 deletions(-)

diff --git a/src/model/imageprovider.cpp b/src/model/imageprovider.cpp
index f9a24d2..3810dbb 100644
--- a/src/model/imageprovider.cpp
+++ b/src/model/imageprovider.cpp
@@ -26,7 +26,8 @@
 const int ImageProvider::MSEC_PER_DOWNLOAD = 16; // ~ 256kbit/sec for 2k images
 
 ImageProvider::ImageProvider(const QString imageProviderName, const QString extension, const QString cacheDirName) : QObject(),
-    _cacheProvider(this), _imageProviderName(imageProviderName), _extension(extension) {
+    _imageProviderName(imageProviderName), _extension(extension) {
+    _cacheProvider = new CachedImageProvider(this);
 
     activeDownloadCount = 0;
 
@@ -158,7 +159,7 @@ void ImageProvider::loadImageFile(QString emoteKey, QString filename) {
 }
 
 QQmlImageProviderBase * ImageProvider::getQMLImageProvider() {
-    return &_cacheProvider;
+    return _cacheProvider;
 }
 
 bool ImageProvider::downloadsInProgress() const {
diff --git a/src/model/imageprovider.h b/src/model/imageprovider.h
index d398ee7..fab4271 100644
--- a/src/model/imageprovider.h
+++ b/src/model/imageprovider.h
@@ -100,7 +100,7 @@ private:
     QNetworkAccessManager _manager;
 
     friend class CachedImageProvider;
-    CachedImageProvider _cacheProvider;
+    CachedImageProvider *_cacheProvider;
 
     QHash<QString, QImage> _imageTable;
     QString _imageProviderName;
diff --git a/src/model/settingsmanager.cpp b/src/model/settingsmanager.cpp
index 9f4bfd7..60d8705 100644
--- a/src/model/settingsmanager.cpp
+++ b/src/model/settingsmanager.cpp
@@ -12,8 +12,8 @@ SettingsManager::SettingsManager(QObject *parent) :
 
 SettingsManager *SettingsManager::getInstance()
 {
-    static SettingsManager instance;
-    return &instance;
+    static SettingsManager *instance = new SettingsManager();
+    return instance;
 }
 
 void SettingsManager::load()
diff --git a/src/model/vodmanager.cpp b/src/model/vodmanager.cpp
index 958aa2a..af6913e 100644
--- a/src/model/vodmanager.cpp
+++ b/src/model/vodmanager.cpp
@@ -41,15 +41,11 @@ VodManager::VodManager(QObject *parent) :
     settings.endArray();
 
     emit modelChanged();
-
-    std::atexit([](){
-       VodManager::getInstance()->saveSettings();
-    });
 }
 
 VodManager *VodManager::getInstance() {
-    static VodManager instance;
-    return &instance;
+    static VodManager *instance = new VodManager();
+    return instance;
 }
 
 VodManager::~VodManager()
-- 
2.26.2


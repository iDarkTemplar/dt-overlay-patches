From 5812ef112b32ff898e2b7afdd6c3a1630d484473 Mon Sep 17 00:00:00 2001
From: "i.Dark_Templar" <darktemplar@dark-templar-archives.net>
Date: Thu, 9 Apr 2020 23:36:54 +0300
Subject: [PATCH] Fix plymouth crash on splash hide followed by splash show

On hide-splash command plymouth closes terminal,
and when it tries to use terminal again
on subsequent show-splash command, plymouth daemon crashes.
---
 src/libply-splash-core/ply-renderer-plugin.h |  1 +
 src/libply-splash-core/ply-renderer.c        |  7 +++++-
 src/libply-splash-core/ply-terminal.c        |  9 +++++++
 src/main.c                                   | 26 ++++++++++++--------
 src/plugins/renderers/drm/plugin.c           | 11 +++++++++
 src/plugins/renderers/frame-buffer/plugin.c  | 11 +++++++++
 6 files changed, 54 insertions(+), 11 deletions(-)

diff --git a/src/libply-splash-core/ply-renderer-plugin.h b/src/libply-splash-core/ply-renderer-plugin.h
index 367d922..bcbeb0f 100644
--- a/src/libply-splash-core/ply-renderer-plugin.h
+++ b/src/libply-splash-core/ply-renderer-plugin.h
@@ -76,6 +76,7 @@ typedef struct
                                      int                         *scale);
         bool (*get_capslock_state)(ply_renderer_backend_t *backend);
         const char * (*get_keymap)(ply_renderer_backend_t *backend);
+        void (*activate_vt)(ply_renderer_backend_t *backend);
 } ply_renderer_plugin_interface_t;
 
 #endif /* PLY_RENDERER_PLUGIN_H */
diff --git a/src/libply-splash-core/ply-renderer.c b/src/libply-splash-core/ply-renderer.c
index 3462bfe..0ed7ecf 100644
--- a/src/libply-splash-core/ply-renderer.c
+++ b/src/libply-splash-core/ply-renderer.c
@@ -208,8 +208,13 @@ ply_renderer_map_to_device (ply_renderer_t *renderer)
         assert (renderer != NULL);
         assert (renderer->plugin_interface != NULL);
 
-        if (renderer->is_mapped)
+        if (renderer->is_mapped) {
+                if (renderer->plugin_interface->activate_vt != NULL) {
+                        renderer->plugin_interface->activate_vt (renderer->backend);
+                }
+
                 return true;
+        }
 
         renderer->is_mapped = renderer->plugin_interface->map_to_device (renderer->backend);
 
diff --git a/src/libply-splash-core/ply-terminal.c b/src/libply-splash-core/ply-terminal.c
index 2b56686..eb53653 100644
--- a/src/libply-splash-core/ply-terminal.c
+++ b/src/libply-splash-core/ply-terminal.c
@@ -954,6 +954,8 @@ ply_terminal_activate_vt (ply_terminal_t *terminal)
         if (terminal->is_active)
                 return true;
 
+        ply_terminal_watch_for_vt_changes (terminal);
+
         if (!set_active_vt (terminal, terminal->vt_number)) {
                 ply_trace ("unable to set active vt to %d: %m",
                            terminal->vt_number);
@@ -1009,6 +1011,13 @@ ply_terminal_deactivate_vt (ply_terminal_t *terminal)
                 ply_trace ("terminal for vt %d is inactive", terminal->vt_number);
         }
 
+        /* Due to stopping watching for changes,
+         * do what on_leave_vt callback does,
+         * except for ioctl call
+         */
+        terminal->is_active = false;
+        do_active_vt_changed (terminal);
+
         if (!deallocate_vt (terminal, old_vt_number)) {
                 ply_trace ("couldn't deallocate vt %d: %m", old_vt_number);
                 return false;
diff --git a/src/main.c b/src/main.c
index 8848ad0..acff2f2 100644
--- a/src/main.c
+++ b/src/main.c
@@ -130,7 +130,7 @@ static void attach_splash_to_devices (state_t           *state,
 static bool attach_to_running_session (state_t *state);
 static void detach_from_running_session (state_t *state);
 static void on_escape_pressed (state_t *state);
-static void dump_details_and_quit_splash (state_t *state);
+static void dump_details_and_quit_splash (state_t *state, int keep_terminal_fd);
 static void update_display (state_t *state);
 
 static void on_error_message (ply_buffer_t *debug_buffer,
@@ -919,7 +919,7 @@ on_show_splash (state_t *state)
 
         if (plymouth_should_ignore_show_splash_calls (state)) {
                 ply_trace ("show splash called while ignoring show splash calls");
-                dump_details_and_quit_splash (state);
+                dump_details_and_quit_splash (state, true);
                 return;
         }
 
@@ -1112,7 +1112,7 @@ load_devices (state_t                   *state,
 }
 
 static void
-quit_splash (state_t *state)
+quit_splash (state_t *state, int keep_terminal_fd)
 {
         ply_trace ("quitting splash");
         if (state->boot_splash != NULL) {
@@ -1125,9 +1125,15 @@ quit_splash (state_t *state)
 
         if (state->local_console_terminal != NULL) {
                 if (!state->should_retain_splash) {
-                        ply_trace ("Not retaining splash, so deallocating VT");
+                        if (!keep_terminal_fd) {
+                            ply_trace ("Not retaining splash, so deallocating VT");
+                        }
+
                         ply_terminal_deactivate_vt (state->local_console_terminal);
-                        ply_terminal_close (state->local_console_terminal);
+
+                        if (!keep_terminal_fd) {
+                            ply_terminal_close (state->local_console_terminal);
+                        }
                 }
         }
 
@@ -1154,13 +1160,13 @@ hide_splash (state_t *state)
 }
 
 static void
-dump_details_and_quit_splash (state_t *state)
+dump_details_and_quit_splash (state_t *state, int keep_terminal_fd)
 {
         state->showing_details = false;
         toggle_between_splash_and_details (state);
 
         hide_splash (state);
-        quit_splash (state);
+        quit_splash (state, keep_terminal_fd);
 }
 
 static void
@@ -1173,7 +1179,7 @@ on_hide_splash (state_t *state)
                 return;
 
         ply_trace ("hiding boot splash");
-        dump_details_and_quit_splash (state);
+        dump_details_and_quit_splash (state, true);
 }
 
 static void
@@ -1250,7 +1256,7 @@ on_boot_splash_idle (state_t *state)
                 }
 
                 ply_trace ("quitting splash");
-                quit_splash (state);
+                quit_splash (state, false);
                 ply_trace ("quitting program");
                 quit_program (state);
         } else if (state->deactivate_trigger != NULL) {
@@ -1371,7 +1377,7 @@ on_quit (state_t       *state,
         if (state->is_inactive && !retain_splash) {
                 /* We've been deactivated and X failed to start
                  */
-                dump_details_and_quit_splash (state);
+                dump_details_and_quit_splash (state, false);
                 quit_program (state);
         } else if (state->boot_splash != NULL) {
                 if (!state->splash_is_becoming_idle) {
diff --git a/src/plugins/renderers/drm/plugin.c b/src/plugins/renderers/drm/plugin.c
index 4dbf8da..42e6217 100644
--- a/src/plugins/renderers/drm/plugin.c
+++ b/src/plugins/renderers/drm/plugin.c
@@ -1578,6 +1578,16 @@ handle_change_event (ply_renderer_backend_t *backend)
         return ret;
 }
 
+static void
+activate_vt (ply_renderer_backend_t *backend)
+{
+        assert (backend != NULL);
+
+        if ((backend->terminal != NULL) && (!ply_terminal_is_active (backend->terminal))) {
+                ply_terminal_activate_vt (backend->terminal);
+        }
+}
+
 static bool
 map_to_device (ply_renderer_backend_t *backend)
 {
@@ -1869,6 +1879,7 @@ ply_renderer_backend_get_interface (void)
                 .get_panel_properties         = get_panel_properties,
                 .get_capslock_state           = get_capslock_state,
                 .get_keymap                   = get_keymap,
+                .activate_vt                  = activate_vt,
         };
 
         return &plugin_interface;
diff --git a/src/plugins/renderers/frame-buffer/plugin.c b/src/plugins/renderers/frame-buffer/plugin.c
index 87e486a..6dc597d 100644
--- a/src/plugins/renderers/frame-buffer/plugin.c
+++ b/src/plugins/renderers/frame-buffer/plugin.c
@@ -520,6 +520,16 @@ query_device (ply_renderer_backend_t *backend)
         return true;
 }
 
+static void
+activate_vt (ply_renderer_backend_t *backend)
+{
+        assert (backend != NULL);
+
+        if ((backend->terminal != NULL) && (!ply_terminal_is_active (backend->terminal))) {
+                ply_terminal_activate_vt (backend->terminal);
+        }
+}
+
 static bool
 map_to_device (ply_renderer_backend_t *backend)
 {
@@ -760,6 +770,7 @@ ply_renderer_backend_get_interface (void)
                 .get_device_name              = get_device_name,
                 .get_capslock_state           = get_capslock_state,
                 .get_keymap                   = get_keymap,
+                .activate_vt                  = activate_vt,
         };
 
         return &plugin_interface;
-- 
2.26.2


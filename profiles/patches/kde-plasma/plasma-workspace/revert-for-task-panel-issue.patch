From d777aff970ffa631b66e1617aac919c5379a49cd Mon Sep 17 00:00:00 2001
From: "i.Dark_Templar" <darktemplar@dark-templar-archives.net>
Date: Mon, 7 Jun 2021 23:06:59 +0300
Subject: [PATCH] Revert "include transient windows when determining active
 window on X"

This reverts commit 4700608e8a8ef59b5f3af51267d59ba35cffb395.
---
 libtaskmanager/xwindowtasksmodel.cpp | 23 +++++++----------------
 1 file changed, 7 insertions(+), 16 deletions(-)

diff --git a/libtaskmanager/xwindowtasksmodel.cpp b/libtaskmanager/xwindowtasksmodel.cpp
index 18a623db7..e2ceeb3c4 100644
--- a/libtaskmanager/xwindowtasksmodel.cpp
+++ b/libtaskmanager/xwindowtasksmodel.cpp
@@ -56,7 +56,7 @@ public:
     ~Private();
 
     QVector<WId> windows;
-    QMultiHash<WId, WId> transients;
+    QSet<WId> transients;
     QMultiHash<WId, WId> transientsDemandingAttention;
     QHash<WId, KWindowInfo *> windowInfoCache;
     QHash<WId, AppData> appDataCache;
@@ -216,8 +216,9 @@ void XWindowTasksModel::Private::addWindow(WId window)
     const WId leader = info.transientFor();
 
     // Handle transient.
-    if (leader > 0 && leader != window && leader != QX11Info::appRootWindow() && !transients.values().contains(window) && windows.contains(leader)) {
-        transients.insert(leader, window);
+    if (leader > 0 && leader != window && leader != QX11Info::appRootWindow()
+        && !transients.contains(window) && windows.contains(leader)) {
+        transients.insert(window);
 
         // Update demands attention state for leader.
         if (info.hasState(NET::DemandsAttention) && windows.contains(leader)) {
@@ -255,10 +256,8 @@ void XWindowTasksModel::Private::removeWindow(WId window)
         q->endRemoveRows();
     } else { // Could be a transient.
         // Removing a transient might change the demands attention state of the leader.
-        WId leader = transients.key(window, XCB_WINDOW_NONE);
-        if (leader != XCB_WINDOW_NONE) {
-            transients.remove(leader, window);
-            leader = transientsDemandingAttention.key(window, XCB_WINDOW_NONE);
+        if (transients.remove(window)) {
+            const WId leader = transientsDemandingAttention.key(window, XCB_WINDOW_NONE);
 
             if (leader != XCB_WINDOW_NONE) {
                 transientsDemandingAttention.remove(leader, window);
@@ -629,15 +628,7 @@ QVariant XWindowTasksModel::data(const QModelIndex &index, int role) const
     } else if (role == IsWindow) {
         return true;
     } else if (role == IsActive) {
-        if (window == d->activeWindow) {
-            return true;
-        }
-        for (const WId transient : d->transients.values(window)) {
-            if (transient == d->activeWindow) {
-                return true;
-            }
-        }
-        return false;
+        return (window == d->activeWindow);
     } else if (role == IsClosable) {
         return d->windowInfo(window)->actionSupported(NET::ActionClose);
     } else if (role == IsMovable) {
-- 
2.31.1


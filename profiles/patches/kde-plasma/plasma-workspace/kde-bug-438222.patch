From 67003f740888fa9d1bcee60cd28ce9a862d2452a Mon Sep 17 00:00:00 2001
From: Henri Chain <henri.chain@enioka.com>
Date: Wed, 9 Jun 2021 17:17:43 +0200
Subject: [PATCH 1/4] fix BUG 438222

---
 libtaskmanager/xwindowtasksmodel.cpp | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/libtaskmanager/xwindowtasksmodel.cpp b/libtaskmanager/xwindowtasksmodel.cpp
index 8a45b8154..9f3604229 100644
--- a/libtaskmanager/xwindowtasksmodel.cpp
+++ b/libtaskmanager/xwindowtasksmodel.cpp
@@ -56,8 +56,11 @@ public:
     ~Private();
 
     QVector<WId> windows;
+
+    // key=parent, values=transient children
     QMultiHash<WId, WId> transients;
     QMultiHash<WId, WId> transientsDemandingAttention;
+
     QHash<WId, KWindowInfo *> windowInfoCache;
     QHash<WId, AppData> appDataCache;
     QHash<WId, QRect> delegateGeometries;
@@ -314,9 +317,8 @@ void XWindowTasksModel::Private::transientChanged(WId window, NET::Properties pr
 
 void XWindowTasksModel::Private::windowChanged(WId window, NET::Properties properties, NET::Properties2 properties2)
 {
-    if (transients.contains(window)) {
+    if (transients.values().contains(window)) {
         transientChanged(window, properties, properties2);
-
         return;
     }
 
-- 
GitLab


From aa8832d9fc3892477d5b1c7ec5db0fbbd52ff167 Mon Sep 17 00:00:00 2001
From: Henri Chain <henri.chain@enioka.com>
Date: Thu, 10 Jun 2021 16:49:19 +0200
Subject: [PATCH 2/4] use transient leader for active window

---
 libtaskmanager/xwindowtasksmodel.cpp | 11 ++++++-----
 1 file changed, 6 insertions(+), 5 deletions(-)

diff --git a/libtaskmanager/xwindowtasksmodel.cpp b/libtaskmanager/xwindowtasksmodel.cpp
index 9f3604229..d2ba82dff 100644
--- a/libtaskmanager/xwindowtasksmodel.cpp
+++ b/libtaskmanager/xwindowtasksmodel.cpp
@@ -175,6 +175,12 @@ void XWindowTasksModel::Private::init()
     // Update IsActive for previously- and newly-active windows.
     QObject::connect(KWindowSystem::self(), &KWindowSystem::activeWindowChanged, q, [this](WId window) {
         const WId oldActiveWindow = activeWindow;
+
+        const auto parents = transients.keys(window);
+        if (!parents.isEmpty()) {
+            window = parents.first();
+        }
+
         activeWindow = window;
         lastActivated[activeWindow] = QTime::currentTime();
 
@@ -634,11 +640,6 @@ QVariant XWindowTasksModel::data(const QModelIndex &index, int role) const
         if (window == d->activeWindow) {
             return true;
         }
-        for (const WId transient : d->transients.values(window)) {
-            if (transient == d->activeWindow) {
-                return true;
-            }
-        }
         return false;
     } else if (role == IsClosable) {
         return d->windowInfo(window)->actionSupported(NET::ActionClose);
-- 
GitLab


From 2951958ee0907dba5dfa6dde9506f80622e8eba8 Mon Sep 17 00:00:00 2001
From: Henri Chain <henri.chain@enioka.com>
Date: Thu, 10 Jun 2021 17:05:42 +0200
Subject: [PATCH 3/4] invert hashmap for performance

---
 libtaskmanager/xwindowtasksmodel.cpp | 30 ++++++++++++----------------
 1 file changed, 13 insertions(+), 17 deletions(-)

diff --git a/libtaskmanager/xwindowtasksmodel.cpp b/libtaskmanager/xwindowtasksmodel.cpp
index d2ba82dff..0670af172 100644
--- a/libtaskmanager/xwindowtasksmodel.cpp
+++ b/libtaskmanager/xwindowtasksmodel.cpp
@@ -57,8 +57,9 @@ public:
 
     QVector<WId> windows;
 
-    // key=parent, values=transient children
-    QMultiHash<WId, WId> transients;
+    // key=transient child, value=leader
+    QHash<WId, WId> transients;
+    // key=leader, values=transient children
     QMultiHash<WId, WId> transientsDemandingAttention;
 
     QHash<WId, KWindowInfo *> windowInfoCache;
@@ -176,9 +177,9 @@ void XWindowTasksModel::Private::init()
     QObject::connect(KWindowSystem::self(), &KWindowSystem::activeWindowChanged, q, [this](WId window) {
         const WId oldActiveWindow = activeWindow;
 
-        const auto parents = transients.keys(window);
-        if (!parents.isEmpty()) {
-            window = parents.first();
+        const auto leader = transients.value(window, XCB_WINDOW_NONE);
+        if (leader != XCB_WINDOW_NONE) {
+            window = leader;
         }
 
         activeWindow = window;
@@ -225,8 +226,8 @@ void XWindowTasksModel::Private::addWindow(WId window)
     const WId leader = info.transientFor();
 
     // Handle transient.
-    if (leader > 0 && leader != window && leader != QX11Info::appRootWindow() && !transients.values().contains(window) && windows.contains(leader)) {
-        transients.insert(leader, window);
+    if (leader > 0 && leader != window && leader != QX11Info::appRootWindow() && !transients.contains(window) && windows.contains(leader)) {
+        transients.insert(window, leader);
 
         // Update demands attention state for leader.
         if (info.hasState(NET::DemandsAttention) && windows.contains(leader)) {
@@ -264,10 +265,8 @@ void XWindowTasksModel::Private::removeWindow(WId window)
         q->endRemoveRows();
     } else { // Could be a transient.
         // Removing a transient might change the demands attention state of the leader.
-        WId leader = transients.key(window, XCB_WINDOW_NONE);
-        if (leader != XCB_WINDOW_NONE) {
-            transients.remove(leader, window);
-            leader = transientsDemandingAttention.key(window, XCB_WINDOW_NONE);
+        if (transients.remove(window)) {
+            const WId leader = transientsDemandingAttention.key(window, XCB_WINDOW_NONE);
 
             if (leader != XCB_WINDOW_NONE) {
                 transientsDemandingAttention.remove(leader, window);
@@ -323,7 +322,7 @@ void XWindowTasksModel::Private::transientChanged(WId window, NET::Properties pr
 
 void XWindowTasksModel::Private::windowChanged(WId window, NET::Properties properties, NET::Properties2 properties2)
 {
-    if (transients.values().contains(window)) {
+    if (transients.contains(window)) {
         transientChanged(window, properties, properties2);
         return;
     }
@@ -637,10 +636,7 @@ QVariant XWindowTasksModel::data(const QModelIndex &index, int role) const
     } else if (role == IsWindow) {
         return true;
     } else if (role == IsActive) {
-        if (window == d->activeWindow) {
-            return true;
-        }
-        return false;
+        return (window == d->activeWindow);
     } else if (role == IsClosable) {
         return d->windowInfo(window)->actionSupported(NET::ActionClose);
     } else if (role == IsMovable) {
@@ -732,7 +728,7 @@ void XWindowTasksModel::requestActivate(const QModelIndex &index)
             // dialog and trying to bring the window forward by clicking on it in a tasks widget
             // TODO: do we need to check all the transients for shaded?"
         } else if (!d->transients.isEmpty()) {
-            foreach (const WId transient, d->transients) {
+            foreach (const WId transient, d->transients.keys()) {
                 KWindowInfo info(transient, NET::WMState, NET::WM2TransientFor);
 
                 if (info.valid(true) && info.hasState(NET::Shaded) && info.transientFor() == window) {
-- 
GitLab


From e41e65531544698337d1c6d2f288db613b5f50eb Mon Sep 17 00:00:00 2001
From: Henri Chain <henri.chain@enioka.com>
Date: Thu, 10 Jun 2021 17:29:19 +0200
Subject: [PATCH 4/4] optimize

---
 libtaskmanager/xwindowtasksmodel.cpp | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/libtaskmanager/xwindowtasksmodel.cpp b/libtaskmanager/xwindowtasksmodel.cpp
index 0670af172..30a307fd3 100644
--- a/libtaskmanager/xwindowtasksmodel.cpp
+++ b/libtaskmanager/xwindowtasksmodel.cpp
@@ -728,10 +728,10 @@ void XWindowTasksModel::requestActivate(const QModelIndex &index)
             // dialog and trying to bring the window forward by clicking on it in a tasks widget
             // TODO: do we need to check all the transients for shaded?"
         } else if (!d->transients.isEmpty()) {
-            foreach (const WId transient, d->transients.keys()) {
+            const auto transients = d->transients.keys(window);
+            for (const auto transient : qAsConst(transients)) {
                 KWindowInfo info(transient, NET::WMState, NET::WM2TransientFor);
-
-                if (info.valid(true) && info.hasState(NET::Shaded) && info.transientFor() == window) {
+                if (info.valid(true) && info.hasState(NET::Shaded)) {
                     window = transient;
                     break;
                 }
-- 
GitLab


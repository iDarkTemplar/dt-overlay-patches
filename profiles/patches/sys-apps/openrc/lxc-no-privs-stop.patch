From a6a9909a022ab7f0c34bad4feeef22b31df262dd Mon Sep 17 00:00:00 2001
From: "i.Dark_Templar" <darktemplar@dark-templar-archives.net>
Date: Sun, 12 Nov 2017 14:27:52 +0300
Subject: [PATCH] Temporarily change euid and egid when searching for processes
 with specific pid.

This should fix https://github.com/OpenRC/openrc/issues/180
---
 sh/start-stop-daemon.sh    |  1 +
 sh/supervise-daemon.sh     |  1 +
 src/rc/rc-schedules.c      | 58 ++++++++++++++++++++++++++++++++++++++++++----
 src/rc/rc-schedules.h      |  4 ++--
 src/rc/start-stop-daemon.c |  4 ++--
 src/rc/supervise-daemon.c  |  4 ++--
 6 files changed, 62 insertions(+), 10 deletions(-)

diff --git a/sh/start-stop-daemon.sh b/sh/start-stop-daemon.sh
index 0793b19a..aca571a1 100644
--- a/sh/start-stop-daemon.sh
+++ b/sh/start-stop-daemon.sh
@@ -83,6 +83,7 @@ ssd_stop()
 		${command:+--exec} $command \
 		${procname:+--name} $procname \
 		${pidfile:+--pidfile} $chroot$pidfile \
+		${command_user+--user} $command_user \
 		${stopsig:+--signal} $stopsig \
 		${_progress}
 
diff --git a/sh/supervise-daemon.sh b/sh/supervise-daemon.sh
index f6e599d5..1b30d7f4 100644
--- a/sh/supervise-daemon.sh
+++ b/sh/supervise-daemon.sh
@@ -51,6 +51,7 @@ supervise_stop()
 	ebegin "Stopping ${name:-$RC_SVCNAME}"
 	supervise-daemon "${RC_SVCNAME}" --stop \
 		${pidfile:+--pidfile} $chroot$pidfile \
+		${command_user+--user} $command_user \
 		${stopsig:+--signal} $stopsig
 
 	eend $? "Failed to stop ${name:-$RC_SVCNAME}"
diff --git a/src/rc/rc-schedules.c b/src/rc/rc-schedules.c
index d60c2822..7baff56e 100644
--- a/src/rc/rc-schedules.c
+++ b/src/rc/rc-schedules.c
@@ -249,16 +249,66 @@ void parse_schedule(const char *applet, const char *string, int timeout)
 
 /* return number of processes killed, -1 on error */
 int do_stop(const char *applet, const char *exec, const char *const *argv,
-    pid_t pid, uid_t uid,int sig, bool test, bool quiet)
+    pid_t pid, uid_t uid, gid_t gid, int sig, bool test, bool quiet)
 {
 	RC_PIDLIST *pids;
 	RC_PID *pi;
 	RC_PID *np;
 	bool killed;
 	int nkilled = 0;
+	uid_t current_euid;
+	gid_t current_egid;
 
 	if (pid > 0)
+	{
+		/*
+		 * It may be necessary to change uid and gid to match process
+		 * See: https://github.com/OpenRC/openrc/issues/180
+		 */
+		if (gid != 0)
+		{
+			current_egid = getegid();
+
+			if (current_egid != gid)
+			{
+				if (setegid(gid) < 0)
+				{
+					eerrorx("%s: failed to change egid to %llu", applet, (unsigned long long) gid);
+				}
+			}
+		}
+
+		if (uid != 0)
+		{
+			current_euid = geteuid();
+
+			if (current_euid != uid)
+			{
+				if (seteuid(uid) < 0)
+				{
+					eerrorx("%s: failed to change euid to %llu", applet, (unsigned long long) uid);
+				}
+			}
+		}
+
 		pids = rc_find_pids(NULL, NULL, 0, pid);
+
+		if ((uid != 0) && (current_euid != uid))
+		{
+			if (seteuid(current_euid) < 0)
+			{
+				eerrorx("%s: failed to restore euid to %llu\n", applet, (unsigned long long) current_euid);
+			}
+		}
+
+		if ((gid != 0) && (current_egid != gid))
+		{
+			if (setegid(current_egid) < 0)
+			{
+				eerrorx("%s: failed to restore egid to %llu\n", applet, (unsigned long long) current_egid);
+			}
+		}
+	}
 	else
 		pids = rc_find_pids(exec, argv, uid, 0);
 
@@ -295,7 +345,7 @@ int do_stop(const char *applet, const char *exec, const char *const *argv,
 
 int run_stop_schedule(const char *applet,
 		const char *exec, const char *const *argv,
-		pid_t pid, uid_t uid,
+		pid_t pid, uid_t uid, gid_t gid,
     bool test, bool progress, bool quiet)
 {
 	SCHEDULEITEM *item = TAILQ_FIRST(&schedule);
@@ -333,7 +383,7 @@ int run_stop_schedule(const char *applet,
 
 		case SC_SIGNAL:
 			nrunning = 0;
-			nkilled = do_stop(applet, exec, argv, pid, uid, item->value, test,
+			nkilled = do_stop(applet, exec, argv, pid, uid, gid, item->value, test,
 					quiet);
 			if (nkilled == 0) {
 				if (tkilled == 0) {
@@ -363,7 +413,7 @@ int run_stop_schedule(const char *applet,
 				     nloops++)
 				{
 					if ((nrunning = do_stop(applet, exec, argv,
-						    pid, uid, 0, test, quiet)) == 0)
+						    pid, uid, gid, 0, test, quiet)) == 0)
 						return 0;
 
 
diff --git a/src/rc/rc-schedules.h b/src/rc/rc-schedules.h
index e5dd64c2..c552b88f 100644
--- a/src/rc/rc-schedules.h
+++ b/src/rc/rc-schedules.h
@@ -17,10 +17,10 @@ void free_schedulelist(void);
 int parse_signal(const char *applet, const char *sig);
 void parse_schedule(const char *applet, const char *string, int timeout);
 int do_stop(const char *applet, const char *exec, const char *const *argv,
-		pid_t pid, uid_t uid,int sig, bool test, bool quiet);
+		pid_t pid, uid_t uid, gid_t gid, int sig, bool test, bool quiet);
 int run_stop_schedule(const char *applet,
 		const char *exec, const char *const *argv,
-		pid_t pid, uid_t uid,
+		pid_t pid, uid_t uid, gid_t gid,
 		bool test, bool progress, bool quiet);
 
 #endif
diff --git a/src/rc/start-stop-daemon.c b/src/rc/start-stop-daemon.c
index e98f8ba3..f2e11409 100644
--- a/src/rc/start-stop-daemon.c
+++ b/src/rc/start-stop-daemon.c
@@ -658,7 +658,7 @@ int main(int argc, char **argv)
 		else
 			parse_schedule(applet, NULL, sig);
 		i = run_stop_schedule(applet, exec, (const char *const *)margv,
-		    get_pid(applet, pidfile), uid, test, progress, false);
+		    get_pid(applet, pidfile), uid, gid, test, progress, false);
 
 		if (i < 0)
 			/* We failed to stop something */
@@ -969,7 +969,7 @@ int main(int argc, char **argv)
 			} else
 				pid = 0;
 			if (do_stop(applet, exec, (const char *const *)margv,
-				pid, uid, 0, test, false) > 0)
+				pid, uid, gid, 0, test, false) > 0)
 				alive = true;
 		}
 
diff --git a/src/rc/supervise-daemon.c b/src/rc/supervise-daemon.c
index f3f51ff0..b1852554 100644
--- a/src/rc/supervise-daemon.c
+++ b/src/rc/supervise-daemon.c
@@ -481,7 +481,7 @@ static void supervisor(char *exec, char **argv)
 		if (exiting) {
 			signal_setup(SIGCHLD, SIG_IGN);
 			syslog(LOG_INFO, "stopping %s, pid %d", exec, child_pid);
-			nkilled = run_stop_schedule(applet, exec, NULL, child_pid, 0,
+			nkilled = run_stop_schedule(applet, exec, NULL, child_pid, 0, 0,
 					false, false, true);
 			if (nkilled > 0)
 				syslog(LOG_INFO, "killed %d processes", nkilled);
@@ -819,7 +819,7 @@ int main(int argc, char **argv)
 
 		pid = get_pid(applet, pidfile);
 		if (pid != -1)
-			if (do_stop(applet, exec, (const char * const *)argv, pid, uid,
+			if (do_stop(applet, exec, (const char * const *)argv, pid, uid, gid,
 						0, false, true) > 0)
 				eerrorx("%s: %s is already running", applet, exec);
 
-- 
2.13.6


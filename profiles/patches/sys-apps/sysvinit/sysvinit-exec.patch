From e232f3dc7b834e78abba4279bc02d7b90bfb2eed Mon Sep 17 00:00:00 2001
From: "i.Dark_Templar" <darktemplar@dark-templar-archives.net>
Date: Thu, 9 Apr 2020 00:35:11 +0300
Subject: [PATCH] Implement exec action for sysvinit

---
 src/init.c | 141 +++++++++++++++++++++++++++++++++++------------------
 src/init.h |   1 +
 2 files changed, 94 insertions(+), 48 deletions(-)

diff --git a/src/init.c b/src/init.c
index 0a56111..56036cd 100644
--- a/src/init.c
+++ b/src/init.c
@@ -173,6 +173,7 @@ struct actions {
   { "initdefault", INITDEFAULT	},
   { "sysinit",	   SYSINIT	},
   { "kbrequest",   KBREQUEST    },
+  { "exec",   EXEC    },
   { NULL,	   0		},
 };
 
@@ -1004,6 +1005,40 @@ void init_freeenv(char **e)
 }
 
 
+static
+void reopen_pipe_fd(void)
+{
+  struct stat st;
+
+  /*
+   *	Now finally try to open /run/initctl if pipe_fd is -1
+   *    if it is -2, then we leave it closed
+   */
+  if (pipe_fd == -1) {
+	if ((pipe_fd = open(INIT_FIFO, O_RDWR|O_NONBLOCK)) >= 0) {
+		fstat(pipe_fd, &st);
+		if (!S_ISFIFO(st.st_mode)) {
+			initlog(L_VB, "%s is not a fifo", INIT_FIFO);
+			close(pipe_fd);
+			pipe_fd = -1;
+		}
+	}
+	if (pipe_fd >= 0) {
+		/*
+		 *	Don't use fd's 0, 1 or 2.
+		 */
+		(void) dup2(pipe_fd, PIPE_FD);
+		close(pipe_fd);
+		pipe_fd = PIPE_FD;
+
+		/*
+		 *	Return to caller - we'll be back later.
+		 */
+	}
+  }
+}
+
+
 /*
  *	Fork and execute.
  *
@@ -1011,7 +1046,7 @@ void init_freeenv(char **e)
  *
  */
 static
-pid_t spawn(CHILD *ch, int *res)
+pid_t spawn(CHILD *ch, int *res, int do_fork)
 {
   char *args[16];		/* Argv array */
   char buf[136];		/* Line buffer */
@@ -1020,9 +1055,10 @@ pid_t spawn(CHILD *ch, int *res)
   time_t t;			/* System time */
   int oldAlarm;			/* Previous alarm value */
   char *proc = ch->process;	/* Command line */
-  pid_t pid, pgrp;		/* child, console process group. */
+  pid_t pid = -1, pgrp;		/* child, console process group. */
   sigset_t nmask, omask;	/* For blocking SIGCHLD */
   struct sigaction sa;
+  int pipefd_closed = 0;
 
   *res = -1;
   buf[sizeof(buf) - 1] = 0;
@@ -1120,29 +1156,37 @@ pid_t spawn(CHILD *ch, int *res)
 	/*
 	 *	Block sigchild while forking.
 	 */
-	sigemptyset(&nmask);
-	sigaddset(&nmask, SIGCHLD);
-	sigprocmask(SIG_BLOCK, &nmask, &omask);
+	if (do_fork) {
+		sigemptyset(&nmask);
+		sigaddset(&nmask, SIGCHLD);
+		sigprocmask(SIG_BLOCK, &nmask, &omask);
+	}
 
-	if ((pid = fork()) == 0) {
+	if ((!do_fork) || ((pid = fork()) == 0)) {
+
+		if (do_fork) {
+			close(0);
+			close(1);
+			close(2);
+		}
 
-		close(0);
-		close(1);
-		close(2);
 		if (pipe_fd >= 0)
                 {
                     close(pipe_fd);
                     pipe_fd = -1;
+                    pipefd_closed = 1;
                 }
 
-  		sigprocmask(SIG_SETMASK, &omask, NULL);
+		if (do_fork) {
+			sigprocmask(SIG_SETMASK, &omask, NULL);
+		}
 
 		/*
 		 *	In sysinit, boot, bootwait or single user mode:
 		 *	for any wait-type subprocess we _force_ the console
 		 *	to be its controlling tty.
 		 */
-  		if (strchr("*#sS", runlevel) && ch->flags & WAITING) {
+		if (strchr("*#sS", runlevel) && ch->flags & WAITING && do_fork) {
 			int ftty;	/* Handler for tty controlling */
 			/*
 			 *	We fork once extra. This is so that we can
@@ -1224,7 +1268,9 @@ pid_t spawn(CHILD *ch, int *res)
 
   		} else { /* parent */
 			int fd;
-			setsid();
+			if (do_fork) {
+				setsid();
+			}
 			if ((fd = console_open(O_RDWR|O_NOCTTY)) < 0) {
 				initlog(L_VB, "open(%s): %s", console_dev,
 					strerror(errno));
@@ -1257,8 +1303,10 @@ pid_t spawn(CHILD *ch, int *res)
 		 * This is for compatibility with *very*
 		 * old getties - probably it can be taken out.
 		 */
-		if (ch->process[0] != '+')
-			write_utmp_wtmp("", ch->id, getpid(), INIT_PROCESS, "");
+		if (do_fork) {
+			if (ch->process[0] != '+')
+				write_utmp_wtmp("", ch->id, getpid(), INIT_PROCESS, "");
+		}
 
   		/* Reset all the signals, set up environment */
   		for(f = 1; f < NSIG; f++) SETSIG(sa, f, SIG_DFL, SA_RESTART);
@@ -1280,16 +1328,35 @@ pid_t spawn(CHILD *ch, int *res)
 		}
   		initlog(L_VB, "cannot execute \"%s\"", args[1]);
 
-		if (ch->process[0] != '+')
-			write_utmp_wtmp("", ch->id, getpid(), DEAD_PROCESS, NULL);
-  		exit(1);
+		if (do_fork) {
+			if (ch->process[0] != '+')
+				write_utmp_wtmp("", ch->id, getpid(), DEAD_PROCESS, NULL);
+			exit(1);
+		}
+		else
+		{
+			/*
+			 * exec() failed, continue init process
+			 * Make sure there are some fallback records after an exec record
+			 */
+
+			initlog(L_VB, "cannot execute \"%s\", continuing to next action", args[1]);
+
+			if (pipefd_closed)
+			{
+				reopen_pipe_fd();
+			}
+		 }
   	}
 	*res = pid;
-  	sigprocmask(SIG_SETMASK, &omask, NULL);
 
-	INITDBG(L_VB, "Started id %s (pid %d)", ch->id, pid);
+	if (do_fork) {
+		sigprocmask(SIG_SETMASK, &omask, NULL);
+
+		INITDBG(L_VB, "Started id %s (pid %d)", ch->id, pid);
+	}
 
-	if (pid == -1) {
+	if (do_fork && (pid == -1)) {
 		initlog(L_VB, "cannot fork, retry..");
 		do_sleep(5);
 		continue;
@@ -1329,8 +1396,11 @@ void startup(CHILD *ch)
 		case ONDEMAND:
 		case RESPAWN:
   			ch->flags |= RUNNING;
-  			(void)spawn(ch, &(ch->pid));
+			(void)spawn(ch, &(ch->pid), 1);
   			break;
+		case EXEC:
+			(void)spawn(ch, &(ch->pid), 0);
+			break;
 	}
 }
 
@@ -2386,32 +2456,7 @@ void check_init_fifo(void)
 	}
   }
 
-  /*
-   *	Now finally try to open /run/initctl if pipe_fd is -1
-   *    if it is -2, then we leave it closed
-   */
-  if (pipe_fd == -1) {
-	if ((pipe_fd = open(INIT_FIFO, O_RDWR|O_NONBLOCK)) >= 0) {
-		fstat(pipe_fd, &st);
-		if (!S_ISFIFO(st.st_mode)) {
-			initlog(L_VB, "%s is not a fifo", INIT_FIFO);
-			close(pipe_fd);
-			pipe_fd = -1;
-		}
-	}
-	if (pipe_fd >= 0) {
-		/*
-		 *	Don't use fd's 0, 1 or 2.
-		 */
-		(void) dup2(pipe_fd, PIPE_FD);
-		close(pipe_fd);
-		pipe_fd = PIPE_FD;
-
-		/*
-		 *	Return to caller - we'll be back later.
-		 */
-	}
-  }
+	reopen_pipe_fd();
 
   /* Wait for data to appear, _if_ the pipe was opened. */
   if (pipe_fd >= 0) while(!quit) {
@@ -2811,7 +2856,7 @@ void init_main(void)
 	if (emerg_shell) {
 		pid_t rc;
 		SETSIG(sa, SIGCHLD, SIG_DFL, SA_RESTART);
-		if (spawn(&ch_emerg, &f) > 0) {
+		if (spawn(&ch_emerg, &f, 1) > 0) {
 			while((rc = wait(&st)) != f)
 				if (rc < 0 && errno == ECHILD)
 					break;
diff --git a/src/init.h b/src/init.h
index 7a35706..0510d43 100644
--- a/src/init.h
+++ b/src/init.h
@@ -86,6 +86,7 @@ void wall(const char *text, int remote);
 #define SYSINIT		       13
 #define POWERFAILNOW           14
 #define KBREQUEST               15
+#define EXEC               16
 
 /* Information about a process in the in-core inittab */
 typedef struct _child_ {
-- 
2.24.1

